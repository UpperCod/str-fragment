{"version":3,"file":"index.js","sources":["../src/utils.js","../src/index.js"],"sourcesContent":["/**\n *\n * @typedef {Object} CallbackParam\n * @property {string} body\n * @property {string} content\n * @property {import(\"./internal\").Item} open\n * @property {import(\"./internal\").Item} end\n */\n\n/**\n * @param {string} text\n * @param {number} diff\n * @param {import(\"./internal\").Block} block\n * @param {(param:CallbackParam)=>string} callback\n */\nfunction replaceItem(text, diff, { open, end }, callback) {\n    let before = text.slice(0, open.indexOpen + diff);\n    let after = text.slice(end.indexEnd + diff);\n    let body = text.slice(open.indexOpen + diff, end.indexEnd + diff);\n    let content = text.slice(open.indexEnd + diff, end.indexOpen + diff);\n    let nextContent = callback({ body, content, open, end }) + \"\";\n    diff += nextContent.length - body.length;\n    text = before + nextContent + after;\n    return { diff, text };\n}\n\n/**\n *\n * @param {string} text\n * @param {import(\"./internal\").Block[]} blocks\n * @param {(param:CallbackParam)=>string} callback\n * @param {number} [limit=-1]\n * @returns {string}\n */\nexport function replaceFragments(text, blocks, callback, limit = -1) {\n    let diff = 0;\n    for (let i = 0; i < blocks.length; i++) {\n        let res = replaceItem(text, diff, blocks[i], callback);\n        diff = res.diff;\n        text = res.text;\n        if (limit == i + 1) break;\n    }\n    return text;\n}\n\n/**\n *\n * @param {string} text\n * @param {import(\"./internal\").Block[]} blocks\n * @param {(param:CallbackParam)=>string} callback\n * @param {number} [limit=-1]\n * @returns {void}\n */\nexport function walkFragments(text, blocks, callback, limit = -1) {\n    replaceFragments(\n        text,\n        blocks,\n        (param) => {\n            callback(param);\n            return param.body;\n        },\n        limit\n    );\n}\n","export * from \"./utils\";\n/**\n *\n * @param {string} text\n * @param {RegExp} reg\n * @param {boolean} [end]\n */\nfunction find(text, reg, end) {\n    let current;\n    let position = 0;\n    /**@type {import(\"./internal\").Item[]} */\n    let items = [];\n    while ((current = text.match(reg))) {\n        let [value, ...args] = current;\n        let length = current.index + value.length;\n        if (!length) break;\n        items.push({\n            value,\n            args,\n            indexOpen: position + current.index,\n            indexEnd: position + length,\n            end,\n        });\n        position += length;\n        text = text.slice(length);\n    }\n    return items;\n}\n/**\n *\n * @param {string} text\n * @param {{open:RegExp,end:RegExp,equal:boolean}} find\n */\nexport function getFragments(text, { open, end, equal }) {\n    const itemsOpen = find(text, open);\n    const itemsEnd = find(text, end, true);\n    const min = itemsOpen[0] ? itemsOpen[0].indexEnd : 0;\n    const items = [\n        ...itemsOpen,\n        ...itemsEnd.filter(\n            (item) =>\n                item.indexOpen > min &&\n                (equal ||\n                    !itemsOpen.some(\n                        ({ indexOpen, indexEnd }) =>\n                            item.indexOpen >= indexOpen &&\n                            item.indexEnd <= indexEnd\n                    ))\n        ),\n    ].sort((a, b) => (a.indexOpen > b.indexOpen ? 1 : -1));\n\n    /**@type {import(\"./internal\").Block[]} */\n    let blocks = [];\n    let item;\n    let nested = 0;\n    while ((item = items.shift())) {\n        for (let i = 0; i < items.length; i++) {\n            const next = items[i];\n            if (next.end) {\n                if (!nested--) {\n                    nested = nested > 0 ? nested : 0;\n                    blocks.push({ open: item, end: next });\n                    items.splice(0, i + 1);\n                    break;\n                }\n            } else {\n                nested++;\n            }\n        }\n    }\n    return blocks;\n}\n"],"names":[],"mappings":"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"}